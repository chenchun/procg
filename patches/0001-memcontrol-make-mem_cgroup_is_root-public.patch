From e54a1845d1cd15f9f33f89d201fcb1c387640fd0 Mon Sep 17 00:00:00 2001
From: Fabio Kung <fabio.kung@gmail.com>
Date: Tue, 11 Mar 2014 17:37:17 -0700
Subject: [PATCH 1/2] memcontrol: make mem_cgroup_is_root public

Also provide an internal alternative (__mem_cgroup_is_root) which can be
inlined, that way performance is not affected anywhere.

Signed-off-by: Fabio Kung <fabio.kung@gmail.com>
---
 include/linux/memcontrol.h |  6 ++++++
 mm/memcontrol.c            | 46 ++++++++++++++++++++++++++--------------------
 2 files changed, 32 insertions(+), 20 deletions(-)

diff --git a/include/linux/memcontrol.h b/include/linux/memcontrol.h
index abd0113..d3393ed 100644
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@ -87,6 +87,7 @@ extern void mem_cgroup_uncharge_end(void);
 extern void mem_cgroup_uncharge_page(struct page *page);
 extern void mem_cgroup_uncharge_cache_page(struct page *page);
 
+extern bool mem_cgroup_is_root(const struct mem_cgroup *memcg);
 bool __mem_cgroup_same_or_subtree(const struct mem_cgroup *root_memcg,
 				  struct mem_cgroup *memcg);
 bool task_in_mem_cgroup(struct task_struct *task,
@@ -305,6 +306,11 @@ static inline bool mm_match_cgroup(struct mm_struct *mm,
 	return true;
 }
 
+static inline bool mem_cgroup_is_root(const struct mem_cgroup *memcg)
+{
+	return true;
+}
+
 static inline bool task_in_mem_cgroup(struct task_struct *task,
 				      const struct mem_cgroup *memcg)
 {
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 5b6b003..2089d0c 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -514,11 +514,17 @@ struct cgroup_subsys_state *vmpressure_to_css(struct vmpressure *vmpr)
 	return &container_of(vmpr, struct mem_cgroup, vmpressure)->css;
 }
 
-static inline bool mem_cgroup_is_root(struct mem_cgroup *memcg)
+static inline bool __mem_cgroup_is_root(struct mem_cgroup *memcg)
 {
 	return (memcg == root_mem_cgroup);
 }
 
+bool mem_cgroup_is_root(struct mem_cgroup *memcg)
+{
+	return __mem_cgroup_is_root(memcg);
+}
+EXPORT_SYMBOL(mem_cgroup_is_root);
+
 /*
  * We restrict the id in the range of [1, 65535], so it can fit into
  * an unsigned short.
@@ -562,7 +568,7 @@ void sock_update_memcg(struct sock *sk)
 		 * decision in this case.
 		 */
 		if (sk->sk_cgrp) {
-			BUG_ON(mem_cgroup_is_root(sk->sk_cgrp->memcg));
+			BUG_ON(__mem_cgroup_is_root(sk->sk_cgrp->memcg));
 			css_get(&sk->sk_cgrp->memcg->css);
 			return;
 		}
@@ -570,7 +576,7 @@ void sock_update_memcg(struct sock *sk)
 		rcu_read_lock();
 		memcg = mem_cgroup_from_task(current);
 		cg_proto = sk->sk_prot->proto_cgroup(memcg);
-		if (!mem_cgroup_is_root(memcg) &&
+		if (!__mem_cgroup_is_root(memcg) &&
 		    memcg_proto_active(cg_proto) && css_tryget(&memcg->css)) {
 			sk->sk_cgrp = cg_proto;
 		}
@@ -591,7 +597,7 @@ void sock_release_memcg(struct sock *sk)
 
 struct cg_proto *tcp_proto_cgroup(struct mem_cgroup *memcg)
 {
-	if (!memcg || mem_cgroup_is_root(memcg))
+	if (!memcg || __mem_cgroup_is_root(memcg))
 		return NULL;
 
 	return &memcg->tcp_mem;
@@ -2753,7 +2759,7 @@ static int __mem_cgroup_try_charge(struct mm_struct *mm,
 again:
 	if (*ptr) { /* css should be a valid one */
 		memcg = *ptr;
-		if (mem_cgroup_is_root(memcg))
+		if (__mem_cgroup_is_root(memcg))
 			goto done;
 		if (consume_stock(memcg, nr_pages))
 			goto done;
@@ -2776,7 +2782,7 @@ again:
 		memcg = mem_cgroup_from_task(p);
 		if (!memcg)
 			memcg = root_mem_cgroup;
-		if (mem_cgroup_is_root(memcg)) {
+		if (__mem_cgroup_is_root(memcg)) {
 			rcu_read_unlock();
 			goto done;
 		}
@@ -2856,7 +2862,7 @@ bypass:
 static void __mem_cgroup_cancel_charge(struct mem_cgroup *memcg,
 				       unsigned int nr_pages)
 {
-	if (!mem_cgroup_is_root(memcg)) {
+	if (!__mem_cgroup_is_root(memcg)) {
 		unsigned long bytes = nr_pages * PAGE_SIZE;
 
 		res_counter_uncharge(&memcg->res, bytes);
@@ -2874,7 +2880,7 @@ static void __mem_cgroup_cancel_local_charge(struct mem_cgroup *memcg,
 {
 	unsigned long bytes = nr_pages * PAGE_SIZE;
 
-	if (mem_cgroup_is_root(memcg))
+	if (__mem_cgroup_is_root(memcg))
 		return;
 
 	res_counter_uncharge_until(&memcg->res, memcg->res.parent, bytes);
@@ -3003,7 +3009,7 @@ static DEFINE_MUTEX(activate_kmem_mutex);
 
 static inline bool memcg_can_account_kmem(struct mem_cgroup *memcg)
 {
-	return !mem_cgroup_disabled() && !mem_cgroup_is_root(memcg) &&
+	return !mem_cgroup_disabled() && !__mem_cgroup_is_root(memcg) &&
 		memcg_kmem_is_active(memcg);
 }
 
@@ -3697,7 +3703,7 @@ void __memcg_kmem_commit_charge(struct page *page, struct mem_cgroup *memcg,
 {
 	struct page_cgroup *pc;
 
-	VM_BUG_ON(mem_cgroup_is_root(memcg));
+	VM_BUG_ON(__mem_cgroup_is_root(memcg));
 
 	/* The page allocation failed. Revert */
 	if (!page) {
@@ -3740,7 +3746,7 @@ void __memcg_kmem_uncharge_pages(struct page *page, int order)
 	if (!memcg)
 		return;
 
-	VM_BUG_ON_PAGE(mem_cgroup_is_root(memcg), page);
+	VM_BUG_ON_PAGE(__mem_cgroup_is_root(memcg), page);
 	memcg_uncharge_kmem(memcg, PAGE_SIZE << order);
 }
 #else
@@ -3894,7 +3900,7 @@ static int mem_cgroup_move_parent(struct page *page,
 	unsigned long uninitialized_var(flags);
 	int ret;
 
-	VM_BUG_ON(mem_cgroup_is_root(child));
+	VM_BUG_ON(__mem_cgroup_is_root(child));
 
 	ret = -EBUSY;
 	if (!get_page_unless_zero(page))
@@ -4248,7 +4254,7 @@ __mem_cgroup_uncharge_common(struct page *page, enum charge_type ctype,
 	 * replacement page, so leave it alone when phasing out the
 	 * page that is unused after the migration.
 	 */
-	if (!end_migration && !mem_cgroup_is_root(memcg))
+	if (!end_migration && !__mem_cgroup_is_root(memcg))
 		mem_cgroup_do_uncharge(memcg, nr_pages, ctype);
 
 	return memcg;
@@ -4381,7 +4387,7 @@ void mem_cgroup_uncharge_swap(swp_entry_t ent)
 		 * We uncharge this because swap is freed.
 		 * This memcg can be obsolete one. We avoid calling css_tryget
 		 */
-		if (!mem_cgroup_is_root(memcg))
+		if (!__mem_cgroup_is_root(memcg))
 			res_counter_uncharge(&memcg->memsw, PAGE_SIZE);
 		mem_cgroup_swap_statistics(memcg, false);
 		css_put(&memcg->css);
@@ -5022,7 +5028,7 @@ static int mem_cgroup_force_empty_write(struct cgroup_subsys_state *css,
 {
 	struct mem_cgroup *memcg = mem_cgroup_from_css(css);
 
-	if (mem_cgroup_is_root(memcg))
+	if (__mem_cgroup_is_root(memcg))
 		return -EINVAL;
 	return mem_cgroup_force_empty(memcg);
 }
@@ -5088,7 +5094,7 @@ static inline u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)
 {
 	u64 val;
 
-	if (!mem_cgroup_is_root(memcg)) {
+	if (!__mem_cgroup_is_root(memcg)) {
 		if (!swap)
 			return res_counter_read_u64(&memcg->res, RES_USAGE);
 		else
@@ -5287,7 +5293,7 @@ static int mem_cgroup_write(struct cgroup_subsys_state *css, struct cftype *cft,
 
 	switch (name) {
 	case RES_LIMIT:
-		if (mem_cgroup_is_root(memcg)) { /* Can't set limit on root */
+		if (__mem_cgroup_is_root(memcg)) { /* Can't set limit on root */
 			ret = -EINVAL;
 			break;
 		}
@@ -6677,7 +6683,7 @@ static int mem_cgroup_do_precharge(unsigned long count)
 	int batch_count = PRECHARGE_COUNT_AT_ONCE;
 	struct mem_cgroup *memcg = mc.to;
 
-	if (mem_cgroup_is_root(memcg)) {
+	if (__mem_cgroup_is_root(memcg)) {
 		mc.precharge += count;
 		/* we don't need css_get for root */
 		return ret;
@@ -6992,14 +6998,14 @@ static void __mem_cgroup_clear_mc(void)
 	/* we must fixup refcnts and charges */
 	if (mc.moved_swap) {
 		/* uncharge swap account from the old cgroup */
-		if (!mem_cgroup_is_root(mc.from))
+		if (!__mem_cgroup_is_root(mc.from))
 			res_counter_uncharge(&mc.from->memsw,
 						PAGE_SIZE * mc.moved_swap);
 
 		for (i = 0; i < mc.moved_swap; i++)
 			css_put(&mc.from->css);
 
-		if (!mem_cgroup_is_root(mc.to)) {
+		if (!__mem_cgroup_is_root(mc.to)) {
 			/*
 			 * we charged both to->res and to->memsw, so we should
 			 * uncharge to->res.
-- 
1.8.3.2

