From 416df3c077369f3fefb9d628ea8a205f997f02c6 Mon Sep 17 00:00:00 2001
From: Fabio Kung <fabio.kung@gmail.com>
Date: Wed, 12 Mar 2014 10:10:28 -0700
Subject: [PATCH 2/2] memcontrol: make memcg stats public

Signed-off-by: Fabio Kung <fabio.kung@gmail.com>
---
 include/linux/memcontrol.h | 31 ++++++++++++++++++++++++-
 mm/memcontrol.c            | 56 +++++++++++++++++++++++-----------------------
 2 files changed, 58 insertions(+), 29 deletions(-)

diff --git a/include/linux/memcontrol.h b/include/linux/memcontrol.h
index d3393ed..95993e8 100644
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@ -47,6 +47,18 @@ enum mem_cgroup_stat_index {
 	MEM_CGROUP_STAT_NSTATS,
 };
 
+/*
+ * The corresponding mem_cgroup_events_names is defined in mm/memcontrol.c,
+ * These two lists should keep in accord with each other.
+ */
+enum mem_cgroup_events_index {
+	MEM_CGROUP_EVENTS_PGPGIN,	/* # of pages paged in */
+	MEM_CGROUP_EVENTS_PGPGOUT,	/* # of pages paged out */
+	MEM_CGROUP_EVENTS_PGFAULT,	/* # of page-faults */
+	MEM_CGROUP_EVENTS_PGMAJFAULT,	/* # of major page-faults */
+	MEM_CGROUP_EVENTS_NSTATS,
+};
+
 struct mem_cgroup_reclaim_cookie {
 	struct zone *zone;
 	int priority;
@@ -54,6 +66,10 @@ struct mem_cgroup_reclaim_cookie {
 };
 
 #ifdef CONFIG_MEMCG
+extern const char * const mem_cgroup_stat_names[];
+extern const char * const mem_cgroup_events_names[];
+extern const char * const mem_cgroup_lru_names[];
+
 /*
  * All "charge" functions with gfp_mask should use GFP_KERNEL or
  * (gfp_mask & GFP_RECLAIM_MASK). In current implementatin, memcg doesn't
@@ -87,7 +103,7 @@ extern void mem_cgroup_uncharge_end(void);
 extern void mem_cgroup_uncharge_page(struct page *page);
 extern void mem_cgroup_uncharge_cache_page(struct page *page);
 
-extern bool mem_cgroup_is_root(const struct mem_cgroup *memcg);
+extern bool mem_cgroup_is_root(struct mem_cgroup *memcg);
 bool __mem_cgroup_same_or_subtree(const struct mem_cgroup *root_memcg,
 				  struct mem_cgroup *memcg);
 bool task_in_mem_cgroup(struct task_struct *task,
@@ -100,6 +116,19 @@ extern struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm);
 extern struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg);
 extern struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *css);
 
+/*
+ * Memory usage in bytes (with or without swap included).
+ */
+extern u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap);
+extern u64 mem_cgroup_get_limit(struct mem_cgroup *memcg, bool swap);
+
+extern long mem_cgroup_read_stat(struct mem_cgroup *memcg,
+				 enum mem_cgroup_stat_index idx);
+extern unsigned long mem_cgroup_read_events(struct mem_cgroup *memcg,
+					    enum mem_cgroup_events_index idx);
+extern unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,
+					     unsigned int lru_mask);
+
 static inline
 bool mm_match_cgroup(const struct mm_struct *mm, const struct mem_cgroup *memcg)
 {
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 2089d0c..c9dd222 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -87,8 +87,7 @@ static int really_do_swap_account __initdata = 0;
 #define do_swap_account		0
 #endif
 
-
-static const char * const mem_cgroup_stat_names[] = {
+const char * const mem_cgroup_stat_names[] = {
 	"cache",
 	"rss",
 	"rss_huge",
@@ -96,29 +95,24 @@ static const char * const mem_cgroup_stat_names[] = {
 	"writeback",
 	"swap",
 };
+EXPORT_SYMBOL(mem_cgroup_stat_names);
 
-enum mem_cgroup_events_index {
-	MEM_CGROUP_EVENTS_PGPGIN,	/* # of pages paged in */
-	MEM_CGROUP_EVENTS_PGPGOUT,	/* # of pages paged out */
-	MEM_CGROUP_EVENTS_PGFAULT,	/* # of page-faults */
-	MEM_CGROUP_EVENTS_PGMAJFAULT,	/* # of major page-faults */
-	MEM_CGROUP_EVENTS_NSTATS,
-};
-
-static const char * const mem_cgroup_events_names[] = {
+const char * const mem_cgroup_events_names[] = {
 	"pgpgin",
 	"pgpgout",
 	"pgfault",
 	"pgmajfault",
 };
+EXPORT_SYMBOL(mem_cgroup_events_names);
 
-static const char * const mem_cgroup_lru_names[] = {
+const char * const mem_cgroup_lru_names[] = {
 	"inactive_anon",
 	"active_anon",
 	"inactive_file",
 	"active_file",
 	"unevictable",
 };
+EXPORT_SYMBOL(mem_cgroup_lru_names);
 
 /*
  * Per memcg event counter is incremented at every pagein/pageout. With THP,
@@ -880,8 +874,8 @@ mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_zone *mctz)
  * common workload, threashold and synchonization as vmstat[] should be
  * implemented.
  */
-static long mem_cgroup_read_stat(struct mem_cgroup *memcg,
-				 enum mem_cgroup_stat_index idx)
+long mem_cgroup_read_stat(struct mem_cgroup *memcg,
+			  enum mem_cgroup_stat_index idx)
 {
 	long val = 0;
 	int cpu;
@@ -897,16 +891,10 @@ static long mem_cgroup_read_stat(struct mem_cgroup *memcg,
 	put_online_cpus();
 	return val;
 }
+EXPORT_SYMBOL(mem_cgroup_read_stat);
 
-static void mem_cgroup_swap_statistics(struct mem_cgroup *memcg,
-					 bool charge)
-{
-	int val = (charge) ? 1 : -1;
-	this_cpu_add(memcg->stat->count[MEM_CGROUP_STAT_SWAP], val);
-}
-
-static unsigned long mem_cgroup_read_events(struct mem_cgroup *memcg,
-					    enum mem_cgroup_events_index idx)
+unsigned long mem_cgroup_read_events(struct mem_cgroup *memcg,
+				     enum mem_cgroup_events_index idx)
 {
 	unsigned long val = 0;
 	int cpu;
@@ -922,6 +910,14 @@ static unsigned long mem_cgroup_read_events(struct mem_cgroup *memcg,
 	put_online_cpus();
 	return val;
 }
+EXPORT_SYMBOL(mem_cgroup_read_events);
+
+static void mem_cgroup_swap_statistics(struct mem_cgroup *memcg,
+					 bool charge)
+{
+	int val = (charge) ? 1 : -1;
+	this_cpu_add(memcg->stat->count[MEM_CGROUP_STAT_SWAP], val);
+}
 
 static void mem_cgroup_charge_statistics(struct mem_cgroup *memcg,
 					 struct page *page,
@@ -997,7 +993,7 @@ mem_cgroup_node_nr_lru_pages(struct mem_cgroup *memcg,
 	return total;
 }
 
-static unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,
+unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,
 			unsigned int lru_mask)
 {
 	int nid;
@@ -1007,6 +1003,7 @@ static unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,
 		total += mem_cgroup_node_nr_lru_pages(memcg, nid, lru_mask);
 	return total;
 }
+EXPORT_SYMBOL(mem_cgroup_nr_lru_pages);
 
 static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,
 				       enum mem_cgroup_events_target target)
@@ -1080,6 +1077,7 @@ struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p)
 
 	return mem_cgroup_from_css(task_css(p, mem_cgroup_subsys_id));
 }
+EXPORT_SYMBOL(mem_cgroup_from_task);
 
 struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm)
 {
@@ -1793,7 +1791,7 @@ static int mem_cgroup_count_children(struct mem_cgroup *memcg)
 /*
  * Return the memory (and swap, if configured) limit for a memcg.
  */
-static u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)
+u64 mem_cgroup_get_limit(struct mem_cgroup *memcg, bool swap)
 {
 	u64 limit;
 
@@ -1802,7 +1800,7 @@ static u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)
 	/*
 	 * Do not consider swap space if we cannot swap due to swappiness
 	 */
-	if (mem_cgroup_swappiness(memcg)) {
+	if (swap && mem_cgroup_swappiness(memcg)) {
 		u64 memsw;
 
 		limit += total_swap_pages << PAGE_SHIFT;
@@ -1817,6 +1815,7 @@ static u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)
 
 	return limit;
 }
+EXPORT_SYMBOL(mem_cgroup_get_limit);
 
 static void mem_cgroup_out_of_memory(struct mem_cgroup *memcg, gfp_t gfp_mask,
 				     int order)
@@ -1838,7 +1837,7 @@ static void mem_cgroup_out_of_memory(struct mem_cgroup *memcg, gfp_t gfp_mask,
 	}
 
 	check_panic_on_oom(CONSTRAINT_MEMCG, gfp_mask, order, NULL);
-	totalpages = mem_cgroup_get_limit(memcg) >> PAGE_SHIFT ? : 1;
+	totalpages = mem_cgroup_get_limit(memcg, true) >> PAGE_SHIFT ? : 1;
 	for_each_mem_cgroup_tree(iter, memcg) {
 		struct css_task_iter it;
 		struct task_struct *task;
@@ -5090,7 +5089,7 @@ static unsigned long mem_cgroup_recursive_stat(struct mem_cgroup *memcg,
 	return val;
 }
 
-static inline u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)
+u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)
 {
 	u64 val;
 
@@ -5113,6 +5112,7 @@ static inline u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)
 
 	return val << PAGE_SHIFT;
 }
+EXPORT_SYMBOL(mem_cgroup_usage);
 
 static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *css,
 				   struct cftype *cft)
-- 
1.8.3.2

